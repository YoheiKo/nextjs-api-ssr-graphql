import { gql, setLogVerbosity, useMutation, useQuery } from "@apollo/client";
import Head from "next/head";
import { useRef, useState } from "react";
import { initializeApollo } from "../lib/apolloClient";
import styles from "../styles/Home.module.css";

const GET_BOOKS = gql`
  query GetBooks {
    books {
      title
      author {
        name
        age
      }
    }
  }
`;

const UPDATE_BOOK = gql`
  mutation AddBook($title: String, $name: String, $age: Int) {
    AddBook(title: $title, name: $name, age: $age) {
      title
      author {
        name
        age
      }
    }
  }
`;

export default function Home({ results }) {
  // const { loading, error, data } = useQuery(GET_BOOKS);
  const titleRef = useRef(null);
  const nameRef = useRef(null);
  const ageRef = useRef(null);
  const [updateBook] = useMutation(UPDATE_BOOK);
  const [renderbooks, setRenderBooks] = useState(results.books);

  const addRecord = (e) => {
    e.preventDefault();

    updateBook({
      variables: {
        title: titleRef.current.value,
        name: nameRef.current.value,
        age: parseInt(ageRef.current.value),
      },
    }).then((res) => {
      console.log(res.data.AddBook);
      setRenderBooks([...renderbooks, res.data.AddBook]);
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>GraphQL Example</h1>
      {renderbooks?.map(({ title, author: { age, name } }) => (
        <p key={`${title}${age}${name}`}>
          {title} by {name} (age: {age})
        </p>
      ))}
      <form>
        <input ref={titleRef} type="text" placeholder="title" />
        <input ref={nameRef} type="text" placeholder="name" />
        <input ref={ageRef} type="text" placeholder="age" />
        <button onClick={addRecord} type="submit">
          MUTATE - basically add...
        </button>
      </form>
    </div>
  );
}

export async function getServerSideProps(context) {
  const apolloClient = initializeApollo();
  const res = await apolloClient.query({
    query: GET_BOOKS,
  });

  return {
    props: {
      results: res.data,
    },
  };
}
